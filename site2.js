(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function collectImages() {
  var q = "anxious"; // search query

  var key = "VTzPToTPWLjDX3jn6Q5RyvmpdUZAKG9Y";
  var request = new XMLHttpRequest();
  var url = 'https://api.giphy.com/v1/gifs/search?q=' + q + '&limit=100&api_key=' + key;

  request.open('GET', url, true);

  request.onload = function () {
    if (request.status >= 200 && request.status < 400) {
      window.images = JSON.parse(request.responseText).data;

      if (images.length <= 0) return;

      var rand = Math.floor(Math.random() * 100);
      var image_url = images[rand].images.downsized_large.url;
      document.getElementById("giphyme").innerHTML = '<img src = "' + image_url + '"  title="GIF via Giphy">';

      var transition_time = 1500;
      var waiting_time = 1500;

      setInterval(function () {
        var rand = Math.floor(Math.random() * 100);

        var image_url = images[rand].images.downsized_large.url;
        document.getElementById("giphyme").innerHTML = '<img src = "' + image_url + '"  title="GIF via Giphy">';
      }, 2 * transition_time + waiting_time);
    }
  };

  request.send();
}

function setDays() {

  // the date
  var today = new Date();
  var inauguration = new Date('2017-10-13');
  var timeinmilisec = today.getTime() - inauguration.getTime();
  var diff = Math.ceil(timeinmilisec / (1000 * 60 * 60 * 24)) * -1;
  document.getElementById('days').innerHTML = diff;
}

collectImages();
setDays();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9reWxlL3NpdGVzL3N0YXJkZXd2YWxsZXkvX2Rldi9zcmMvanMvX3NpdGUyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNLQSxTQUFTLGFBQWEsR0FBRztBQUN2QixNQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7O0FBRWxCLE1BQUksR0FBRyxHQUFHLGtDQUFrQyxDQUFDO0FBQzdDLE1BQUksT0FBTyxHQUFHLElBQUksY0FBYyxFQUFBLENBQUM7QUFDakMsTUFBSSxHQUFHLEdBQUcseUNBQXlDLEdBQUMsQ0FBQyxHQUFDLHFCQUFxQixHQUFDLEdBQUcsQ0FBQzs7QUFHaEYsU0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDOztBQUUvQixTQUFPLENBQUMsTUFBTSxHQUFHLFlBQVc7QUFDMUIsUUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBQztBQUNoRCxZQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFdEQsVUFBRyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFDbkIsT0FBTzs7QUFHVCxVQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUUsQ0FBQztBQUM3QyxVQUFJLFNBQVMsR0FBRyxNQUFNLENBQUUsSUFBSSxDQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUM7QUFDMUQsY0FBUSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEdBQUcsY0FBYyxHQUFFLFNBQVMsR0FBRSwyQkFBMkIsQ0FBQzs7QUFFdEcsVUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDO0FBQzNCLFVBQUksWUFBWSxHQUFHLElBQUksQ0FBQzs7QUFFeEIsaUJBQVcsQ0FBQyxZQUFZO0FBQ3RCLFlBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBRSxDQUFDOztBQUU3QyxZQUFJLFNBQVMsR0FBRyxNQUFNLENBQUUsSUFBSSxDQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUM7QUFDMUQsZ0JBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxHQUFHLGNBQWMsR0FBRSxTQUFTLEdBQUUsMkJBQTJCLENBQUM7T0FFdkcsRUFBRyxDQUFDLEdBQUcsZUFBZSxHQUFHLFlBQVksQ0FBRSxDQUFDO0tBRzFDO0dBQ0YsQ0FBQzs7QUFFRixTQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDaEI7O0FBS0QsU0FBUyxPQUFPLEdBQUU7OztBQUdoQixNQUFJLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ3ZCLE1BQUksWUFBWSxHQUFHLElBQUksSUFBSSxDQUFFLFlBQVksQ0FBRSxDQUFDO0FBQzVDLE1BQUksYUFBYSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDN0QsTUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBRSxhQUFhLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFBLEFBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLFVBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztDQUVsRDs7QUFHRCxhQUFhLEVBQUUsQ0FBQztBQUNoQixPQUFPLEVBQUUsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcblxuXG5cblxuZnVuY3Rpb24gY29sbGVjdEltYWdlcygpIHtcbiAgdmFyIHEgPSBcImFueGlvdXNcIjsgLy8gc2VhcmNoIHF1ZXJ5XG5cbiAgdmFyIGtleSA9IFwiVlR6UFRvVFBXTGpEWDNqbjZRNVJ5dm1wZFVaQUtHOVlcIjtcbiAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7XG4gIHZhciB1cmwgPSAnaHR0cHM6Ly9hcGkuZ2lwaHkuY29tL3YxL2dpZnMvc2VhcmNoP3E9JytxKycmbGltaXQ9MTAwJmFwaV9rZXk9JytrZXk7XG5cblxuICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gIFxuICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA+PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgPCA0MDApe1xuICAgICAgd2luZG93LmltYWdlcyA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpLmRhdGE7XG5cbiAgICAgIGlmKGltYWdlcy5sZW5ndGggPD0gMCApXG4gICAgICAgIHJldHVybjtcbiAgICAgIFxuXG4gICAgICB2YXIgcmFuZCA9IE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAxMDAgKTtcbiAgICAgIHZhciBpbWFnZV91cmwgPSBpbWFnZXNbIHJhbmQgXS5pbWFnZXMuZG93bnNpemVkX2xhcmdlLnVybDtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2lwaHltZVwiKS5pbm5lckhUTUwgPSAnPGltZyBzcmMgPSBcIicrIGltYWdlX3VybCArJ1wiICB0aXRsZT1cIkdJRiB2aWEgR2lwaHlcIj4nO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbl90aW1lID0gMTUwMDtcbiAgICAgIHZhciB3YWl0aW5nX3RpbWUgPSAxNTAwO1xuXG4gICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByYW5kID0gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqIDEwMCApO1xuXG4gICAgICAgIHZhciBpbWFnZV91cmwgPSBpbWFnZXNbIHJhbmQgXS5pbWFnZXMuZG93bnNpemVkX2xhcmdlLnVybDtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnaXBoeW1lXCIpLmlubmVySFRNTCA9ICc8aW1nIHNyYyA9IFwiJysgaW1hZ2VfdXJsICsnXCIgIHRpdGxlPVwiR0lGIHZpYSBHaXBoeVwiPic7XG5cbiAgICAgIH0sICAyICogdHJhbnNpdGlvbl90aW1lICsgd2FpdGluZ190aW1lICk7XG5cblxuICAgIH1cbiAgfTtcblxuICByZXF1ZXN0LnNlbmQoKTtcbn1cblxuXG5cblxuZnVuY3Rpb24gc2V0RGF5cygpe1xuXG4gIC8vIHRoZSBkYXRlIFxuICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICB2YXIgaW5hdWd1cmF0aW9uID0gbmV3IERhdGUoICcyMDE3LTEwLTEzJyApO1xuICB2YXIgdGltZWlubWlsaXNlYyA9IHRvZGF5LmdldFRpbWUoKSAtIGluYXVndXJhdGlvbi5nZXRUaW1lKCk7XG4gIHZhciBkaWZmID0gTWF0aC5jZWlsKCB0aW1laW5taWxpc2VjIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKSAqIC0xO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF5cycpLmlubmVySFRNTCA9IGRpZmY7XG5cbn1cblxuXG5jb2xsZWN0SW1hZ2VzKCk7XG5zZXREYXlzKCk7Il19
